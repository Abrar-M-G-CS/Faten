<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=640, user-scalable=no" />
    <title>Sign Test</title>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.11.0"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"
      integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg=="
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js"
      integrity="sha512-90vH1Z83AJY9DmlWa8WkjkV79yfS2n2Oxhsi2dZbIv0nC4E6m5AbH8Nh156kkM7JePmqD6tcZsfad1ueoaovww=="
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.roboflow.com/0.2.26/roboflow.js"></script>
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Montserrat"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css"
      integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
    />
    <link rel="stylesheet" href="/style.css" />
    <link rel="stylesheet" href="/character_choice.css" />
    <style>

      #camera-container {
        width: 380px;
        height: 360px;
        border: 2px solid black;
        overflow: hidden;
        position: relative;
        top: 80px;
        left: 150px;
        z-index: 0;
      }

      #Right-container {
      position: absolute;
      top: 250px;
      left: 900px;
      color: black;
      border: 2px solid black;
      width: 380px;
      height: 380px;
    }

      .image-item img {
        top: 250px;
        left: 900px;
        width: 380px;
        height: 380px;
      }

      .image-container {
        top: 250px;
        left: 900px;
        width: 380px;
        height: 380px;
      }

      #randomize-button {
        margin-top: 20px;
      }

      #camera-container video{
        margin-bottom: 8px;
      }

      #button-text-container {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    #match-result {
    font-family: "Baloo Bhaijaan 2", sans-serif;
    font-weight: 800;
    margin-top: 20px;
    position: absolute;
    top: -90px; /* Adjust this value to move the text */
    left: -170%;
    font-size: 24px; /* Increase or decrease this value as needed */
}

      

    </style>
  </head>

  <body class="loading">
    <nav class="navbar navbar-light bg-light">
      <div class="grp-title">
        <br />
        <p class="arabic-title">فَـطِـن</p>
      </div>
      <div class="grp-dropdown">
        <div class="dropdown">
          <button
            onclick="myFunction('character')"
            class="dropbtn dropbtn-character btn-digit-learn"
          >
            الأحرف <i class="fas fa-angle-down"></i>
          </button>
          <div
            id="myDropdown-character"
            class="dropdown-content dropdown-character"
          >
            <a href="/character/learn"
              ><i class="fa fa-graduation-cap" aria-hidden="true"></i> تعلم</a
            >
            <a href="/character/test"
              ><i class="fa fa-pen" aria-hidden="true"></i> تحدي</a
            >
          </div>
        </div>
        <div class="dropdown">
          <button
            onclick="myFunction('digit')"
            class="dropbtn dropbtn-digit btn-digit-learn"
          >
            الأرقام <i class="fas fa-angle-down"></i>
          </button>
          <div id="myDropdown-digit" class="dropdown-content dropdown-digit">
            <a href="/digit/learn"
              ><i class="fa fa-graduation-cap" aria-hidden="true"></i> تعلم</a
            >
            <a href="/digit/test"
              ><i class="fa fa-pen" aria-hidden="true"></i> تحدي</a
            >
          </div>
        </div>
        <div class="dropdown">
          <button
            onclick="myFunction('signlanguage')"
            class="dropbtn dropbtn-signlanguage btn-digit-learn"
          >
            لغة الإشارة <i class="fas fa-angle-down"></i>
          </button>
          <div
            id="myDropdown-signlanguage"
            class="dropdown-content dropdown-signlanguage"
          >
            <a href="/sign/learn"
              ><i class="fa fa-graduation-cap" aria-hidden="true"></i> تعلم</a
            >
            <a href="/sign/test"
              ><i class="fa fa-pen" aria-hidden="true"></i> تحدي</a
            >
          </div>
        </div>
        <button
          id="back"
          style="margin-left: 2rem"
          class="dropbtn dropbtn-digit btn-digit-learn"
          onclick="goBack()"
        >
          <i class="fa fa-angle-left" aria-hidden="true"></i> الخلف
        </button>
      </div>
    </nav>

    <div id="camera-container">
      <video id="video" autoplay muted playsinline></video>
      <canvas id="canvas"></canvas>
    </div>

    <div id="Right-container">
      <div class="image-container" id="image-container">
        <!-- Images will be dynamically inserted here -->
      </div>
      <div id="button-text-container">
        <button id="randomize-button">تحدي اخر</button>
        <div id="match-result"></div>
      </div>
    </div>
    

    <script>
      // Images array with descriptions
      const images = [
        { fileName: "Alef.jpg", description: "الف" },
        { fileName: "Beh.jpg", description: "باء" },
        { fileName: "Tah.jpg", description: "تاء" },
        { fileName: "Thah.jpg", description: "ثاء" },
        { fileName: "Jeem.jpg", description: "جيم" },
        { fileName: "Haah.jpg", description: "حاء" },
        { fileName: "Kah.jpg", description: "خاء" },
        { fileName: "Dal.jpg", description: "دال" },
        { fileName: "Thal.jpg", description: "ذال" },
        { fileName: "Rah.jpg", description: "راء" },
        { fileName: "Zah.jpg", description: "زين" },
        { fileName: "Seen.jpg", description: "سين" },
        { fileName: "Sheen.jpg", description: "شين" },
        { fileName: "Sad.jpg", description: "صاد" },
        { fileName: "Dad.jpg", description: "ضاد" },
        { fileName: "Tahh.jpg", description: "طاء" },
        { fileName: "Dah.jpg", description: "ظاء" },
        { fileName: "Ain.jpg", description: "عين" },
        { fileName: "Gain.jpg", description: "غين" },
        { fileName: "Fah.jpg", description: "فاء" },
        { fileName: "Qaf.jpg", description: "قاف" },
        { fileName: "Kaf.jpg", description: "كاف" },
        { fileName: "lam.jpg", description: "لام" },
        { fileName: "meem.jpg", description: "ميم" },
        { fileName: "Noon.jpg", description: "نون" },
        { fileName: "Hah.jpg", description: "هاء" },
        { fileName: "waw.jpg", description: "واو" },
        { fileName: "yah.jpg", description: "ياء" },
        { fileName: "laa.jpg", description: "لا" },
        { fileName: "Tah_marbuta.jpg", description: "تاء مربوطة" },
        { fileName: "al.jpg", description: "ال" },
        // Add other image filenames and s here
      ];

      // Function to shuffle the images array
      function shuffle(array) {
        let currentIndex = array.length,
          temporaryValue,
          randomIndex;
        while (0 !== currentIndex) {
          randomIndex = Math.floor(Math.random() * currentIndex);
          currentIndex -= 1;
          temporaryValue = array[currentIndex];
          array[currentIndex] = array[randomIndex];
          array[randomIndex] = temporaryValue;
        }
        return array;
      }

      // Function to render a single random image
      function renderRandomImage() {
        const imageContainer = document.getElementById("image-container");
        imageContainer.innerHTML = ""; // Clear the container
        const randomImage = shuffle(images)[0];
        const imageItem = document.createElement("div");
        imageItem.className = "image-item";
        imageItem.innerHTML = `<img src="/images/sign_images/${randomImage.fileName}" alt="${randomImage.description}">`;
        imageContainer.appendChild(imageItem);

        // Pass predicted class and image description to match function
        const predictedClass = ""; // You need to retrieve the predicted class here
        matchPredictedClassWithImage(predictedClass, randomImage.description);
      }

      // Initial rendering of a random image
      document.addEventListener("DOMContentLoaded", renderRandomImage);

      // Add event listener to the button
      document
        .getElementById("randomize-button")
        .addEventListener("click", renderRandomImage);
    </script>

    <script>
      function goBack() {
        location.href = "/";
      }
    </script>
    <script>
      /*jshint esversion:6*/

      $(function () {
        const video = $("video")[0];
        const matchResultDiv = $("#match-result");

        var model;
        var cameraMode = "environment"; // or "user"

        const startVideoStreamPromise = navigator.mediaDevices
          .getUserMedia({
            audio: false,
            video: {
              facingMode: cameraMode,
            },
          })
          .then(function (stream) {
            return new Promise(function (resolve) {
              video.srcObject = stream;
              video.onloadeddata = function () {
                video.play();
                resolve();
              };
            });
          });

        var publishable_key = "rf_BDzCGMEKwdbUvVq9eMuOYwURwCC2";
        var toLoad = {
          model: "sign_lang-5i4ij",
          version: 4,
        };

        const loadModelPromise = new Promise(function (resolve, reject) {
          roboflow
            .auth({
              publishable_key: publishable_key,
            })
            .load(toLoad)
            .then(function (m) {
              model = m;
              resolve();
            });
        });

        Promise.all([startVideoStreamPromise, loadModelPromise]).then(
          function () {
            $("body").removeClass("loading");
            resizeCanvas();
            detectFrame();
          }
        );

        var canvas, ctx;
        const font = "16px sans-serif";

        //mapping between english and arabic
        const classMapping = {
          "Arabic-sign-language-detection": "الكتابة باللغة العربية للإشارة",
          Alef: "الف",
          Beh: "باء",
          Teh: "تاء",
          Theh: "ثاء",
          jeem: "جيم",
          Heh: "حاء",
          Khah: "خاء",
          Dal: "دال",
          thal: "ذال",
          Reh: "راء",
          zah: "زاي",
          Zain: "زين",
          seen: "سين",
          Sheen: "شين",
          Sad: "صاد",
          Dad: "ضاد",
          Ain: "عين",
          Ghain: "غين",
          Feh: "فاء",
          Qaf: "قاف",
          Kaf: "كاف",
          Lam: "لام",
          Meem: "ميم",
          Noon: "نون",
          hah: "هاء",
          Waw: "واو",
          Yeh: "ياء",
          Laa: "لا",
          Tah: "طاء",
          Teh_Marbuta: "تاء مربوطة",
          Al: "ال",
        };

        function videoDimensions(video) {
          // Ratio of the video's intrinsic dimensions
          var videoRatio = video.videoWidth / video.videoHeight;

          // The width and height of the video element
          var width = video.offsetWidth,
            height = video.offsetHeight;

          // The ratio of the element's width to its height
          var elementRatio = width / height;

          // If the video element is short and wide
          if (elementRatio > videoRatio) {
            width = height * videoRatio;
          } else {
            // It must be tall and thin, or exactly equal to the original ratio
            height = width / videoRatio;
          }

          return {
            width: width,
            height: height,
          };
        }

        $(window).resize(function () {
          resizeCanvas();
        });

        const resizeCanvas = function () {
          $("canvas").remove();

          canvas = $("<canvas/>");
          ctx = canvas[0].getContext("2d");

          var containerWidth = $("#camera-container").width();
          var containerHeight = $("#camera-container").height();

          // Set canvas dimensions and position to match container
          canvas[0].width = containerWidth;
          canvas[0].height = containerHeight;
          canvas.css({
            position: "absolute", // Set absolute positioning within container
            top: 250,
            left: 150,
          });

          $("body").append(canvas);
        };
        // Function to match predicted class with image description
        function matchPredictedClassWithImage(
          predictedClass,
          randomImageDescription
        ) {
          if (predictedClass === randomImageDescription) {
            $("#match-result").text("احسنت!");
          } else {
            $("#match-result").text("حاول مرة اخرى");
          }
        }

        //This is were the model makes the predition , take the prediction and type it as a text in <p>
        //We will match it with random images from the learn images (Abrar)
        const renderPredictions = function (predictions) {
          var dimensions = videoDimensions(video);

          var scale = 1;

          ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

          predictions.forEach(function (prediction) {
            const x = prediction.bbox.x;
            const y = prediction.bbox.y;

            const width = prediction.bbox.width;
            const height = prediction.bbox.height;

            // Draw the bounding box.
            ctx.strokeStyle = prediction.color;
            ctx.lineWidth = 4;
            ctx.strokeRect(
              (x - width / 2) / scale,
              (y - height / 2) / scale,
              width / scale,
              height / scale
            );

            // Draw the label background.
            ctx.fillStyle = prediction.color;
            const textWidth = ctx.measureText(prediction.class).width;
            const textHeight = parseInt(font, 10); // base 10
            ctx.fillRect(
              (x - width / 2) / scale,
              (y - height / 2) / scale,
              textWidth + 8,
              textHeight + 4
            );
          });

          predictions.forEach(function (prediction) {
            const x = prediction.bbox.x;
            const y = prediction.bbox.y;

            const width = prediction.bbox.width;
            const height = prediction.bbox.height;

            // Draw the text last to ensure it's on top.
            ctx.font = font;
            ctx.textBaseline = "top";
            ctx.fillStyle = "#000000";
            const arabicClass =
              classMapping[prediction.class] || prediction.class;

            ctx.fillText(
              arabicClass,
              (x - width / 2) / scale + 4,
              (y - height / 2) / scale + 1
            );

            // Get the current random image description
            const randomImageDescription = $("#image-container img").attr(
              "alt"
            );

            // Pass predicted class and image description to match function
            matchPredictedClassWithImage(arabicClass, randomImageDescription);
          });
        };

        var prevTime;
        var pastFrameTimes = [];
        const detectFrame = function () {
          if (!model) return requestAnimationFrame(detectFrame);

          model
            .detect(video)
            .then(function (predictions) {
              requestAnimationFrame(detectFrame);
              renderPredictions(predictions);

              if (prevTime) {
                pastFrameTimes.push(Date.now() - prevTime);
                if (pastFrameTimes.length > 30) pastFrameTimes.shift();

                var total = 0;
                _.each(pastFrameTimes, function (t) {
                  total += t / 1000;
                });

                var fps = pastFrameTimes.length / total;
                $("#fps").text(Math.round(fps));
              }
              prevTime = Date.now();
            })
            .catch(function (e) {
              console.log("CAUGHT", e);
              requestAnimationFrame(detectFrame);
            });
        };
      });
    </script>
  </body>
</html>
